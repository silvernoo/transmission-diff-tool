kind: pipeline
type: docker
name: build-and-release-golang-app

steps:
  - name: build-multi-platform
    image: golang:1.21
    commands:
      - |
        set -e
        echo "Starting multi-platform build for tag ${DRONE_TAG}..."

        APP_NAME="diff_tool"
        MAIN_PACKAGE_PATH="."
        RELEASE_DIR="/drone/src/release_artifacts"

        mkdir -p "${RELEASE_DIR}"

        # 目标平台列表: GOOS/GOARCH
        targets=(
          "linux/amd64"
          "linux/arm64"
          "windows/amd64"
          "darwin/amd64"
          "darwin/arm64"
        )

        # Go build LDFLAGS (可选, 减小体积)
        LDFLAGS="-s -w"

        for target in "${targets[@]}"; do
          GOOS_VAL=${target%/*}
          GOARCH_VAL=${target#*/}
          
          echo "Building for ${GOOS_VAL}/${GOARCH_VAL}..."
          
          BINARY_FILENAME="${APP_NAME}-${GOOS_VAL}-${GOARCH_VAL}"
          ARCHIVE_FILENAME="${BINARY_FILENAME}"

          if [ "${GOOS_VAL}" = "windows" ]; then
            BINARY_FILENAME="${BINARY_FILENAME}.exe"
            ARCHIVE_FILENAME="${ARCHIVE_FILENAME}.zip"
          else
            ARCHIVE_FILENAME="${ARCHIVE_FILENAME}.tar.gz"
          fi
          
          # 构建
          GOOS=${GOOS_VAL} GOARCH=${GOARCH_VAL} CGO_ENABLED=0 go build \
            -ldflags="${LDFLAGS}" \
            -o "${RELEASE_DIR}/${BINARY_FILENAME}" \
            ${MAIN_PACKAGE_PATH}

          # 压缩
          echo "Archiving ${BINARY_FILENAME} to ${ARCHIVE_FILENAME}..."
          if [ "${GOOS_VAL}" = "windows" ]; then
            (cd "${RELEASE_DIR}" && zip "${ARCHIVE_FILENAME}" "${BINARY_FILENAME}" && rm "${BINARY_FILENAME}")
          else
            (cd "${RELEASE_DIR}" && tar -czf "${ARCHIVE_FILENAME}" "${BINARY_FILENAME}" && rm "${BINARY_FILENAME}")
          fi
          echo "Built and archived ${RELEASE_DIR}/${ARCHIVE_FILENAME}"
        done

        # 生成 checksums 文件
        echo "Generating checksums..."
        (cd "${RELEASE_DIR}" && sha256sum *.{zip,tar.gz} > checksums.txt)
        
        echo "Build artifacts prepared in ${RELEASE_DIR}:"
        ls -l "${RELEASE_DIR}"
        cat "${RELEASE_DIR}/checksums.txt"

  - name: publish-github-release
    image: plugins/github-release # Drone GitHub Release 插件
    settings:
      api_key:
        from_secret: github_token # 从 Drone Secrets 中获取 GitHub Token
      files:
        - /drone/src/release_artifacts/*.tar.gz
        - /drone/src/release_artifacts/*.zip
        - /drone/src/release_artifacts/checksums.txt
      checksum:
        - sha256 

    depends_on:
      - build-multi-platform




      
