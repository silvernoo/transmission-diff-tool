kind: pipeline
type: docker
name: build-and-release

steps:
  - name: build-artifacts
    image: golang:1.21-alpine
    environment:
      APP_VERSION: ${DRONE_TAG}
    commands:
      - mkdir -p dist
      - |
        set -e
        APP_NAME="diff-tool"
        MAIN_PACKAGE_PATH="./main.go"

        # 定义目标平台
        # 格式: GOOS/GOARCH
        targets=(
            "linux/amd64"
            "linux/arm64"
            "darwin/amd64"
            "darwin/arm64"
            "windows/amd64"
        )

        echo "Building version: ${APP_VERSION}"

        for target in "${targets[@]}"; do
            GOOS=$(echo $target | cut -d'/' -f1)
            GOARCH=$(echo $target | cut -d'/' -f2)
            
            BINARY_NAME="${APP_NAME}-${GOOS}-${GOARCH}"
            if [ "$GOOS" = "windows" ]; then
                BINARY_NAME="${BINARY_NAME}.exe"
            fi
            
            OUTPUT_PATH="dist/${BINARY_NAME}"

            echo "Building for $GOOS/$GOARCH -> ${OUTPUT_PATH}"
            
            # CGO_ENABLED=0 用于生成静态链接的二进制文件（如果可能）
            # -s -w 标志用于减小二进制文件大小
            CGO_ENABLED=0 GOOS=$GOOS GOARCH=$GOARCH go build \
                -ldflags="-s -w -X main.Version=${APP_VERSION}" \
                -o "${OUTPUT_PATH}" \
                ${MAIN_PACKAGE_PATH}

            # 可选: 使用UPX压缩二进制文件 (需要先安装 upx)
            # if [ "$GOOS" != "darwin" ]; then # UPX在macOS上可能有些问题
            #   upx --best --lzma "${OUTPUT_PATH}"
            # fi

            # 打包成压缩文件
            if [ "$GOOS" = "windows" ]; then
                zip -j "dist/${APP_NAME}-${APP_VERSION}-${GOOS}-${GOARCH}.zip" "${OUTPUT_PATH}"
            else
                tar -czvf "dist/${APP_NAME}-${APP_VERSION}-${GOOS}-${GOARCH}.tar.gz" -C dist "${BINARY_NAME}"
            fi
            # 删除原始二进制文件，只保留压缩包
            rm "${OUTPUT_PATH}"
        done
        
        # 列出所有产物，方便调试
        ls -R dist

  - name: github-release
    image: plugins/github-release
    settings:
      api_key:
        from_secret: ${GITHUB_TOKEN}
      files:
        - "dist/*.zip"
        - "dist/*.tar.gz"
      checksum:
        - sha256
        - md5
      title: "Release ${DRONE_TAG}"
      note: "Release notes for ${DRONE_TAG}"